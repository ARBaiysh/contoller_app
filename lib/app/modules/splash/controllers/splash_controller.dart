import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import '../../../core/services/app_update_service.dart';
import '../../../core/services/biometric_service.dart';
import '../../../data/repositories/auth_repository.dart';
import '../../../routes/app_pages.dart';

class SplashController extends GetxController {
  late final AuthRepository _authRepository;
  late final BiometricService _biometricService;
  final GetStorage _storage = GetStorage();
  late final AppUpdateService _appUpdateService;

  // Observable states –¥–ª—è UI
  final _isLoading = true.obs;
  final _loadingText = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'.obs;

  // Getters
  bool get isLoading => _isLoading.value;
  String get loadingText => _loadingText.value;

  @override
  void onInit() {
    super.onInit();
    try {
      _authRepository = Get.find<AuthRepository>();
      _biometricService = Get.find<BiometricService>();
      _appUpdateService = Get.find<AppUpdateService>();
    } catch (e) {
      Get.put(AuthRepository());
      Get.put(BiometricService());
      Get.put(AppUpdateService());
      _authRepository = Get.find<AuthRepository>();
      _biometricService = Get.find<BiometricService>();
      _appUpdateService = Get.find<AppUpdateService>();
    }
  }

  @override
  void onReady() {
    super.onReady();
    _initializeApp();
  }

  Future<void> _initializeApp() async {
    _loadingText.value = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';

    await Future.delayed(const Duration(seconds: 1));

    // ========================================
    // –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
    // ========================================
    _loadingText.value = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏...';

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      final needsUpdate = await _appUpdateService.checkForUpdate();
      final versionInfo = _appUpdateService.versionInfo;

      if (versionInfo != null && _appUpdateService.currentBuildNumber != null) {
        final currentAppBuildNumber = _appUpdateService.currentBuildNumber!;

        // –ñ–ï–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê (forceUpdate = true –ò –≤–µ—Ä—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞)
        if (needsUpdate && versionInfo.forceUpdate) {
          print('[SPLASH] ‚ö†Ô∏è CRITICAL update required! Force blocking...');

          await Future.delayed(const Duration(milliseconds: 500));
          Get.offAllNamed(Routes.UPDATE_REQUIRED);
          return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        }

        // –ú–Ø–ì–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï (–µ—Å—Ç—å –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        if (versionInfo.hasNewerVersion(currentAppBuildNumber) && !needsUpdate) {
          print('[SPLASH] üí° Soft update available (optional)');
          print('[SPLASH] Current: $currentAppBuildNumber, Latest: ${versionInfo.currentBuildNumber}');

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          Get.find<AppUpdateService>().softUpdateAvailable = true;
        }

        print('[SPLASH] ‚úÖ App version check completed');
      }
    } catch (e) {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
      print('[SPLASH] ‚ö†Ô∏è Error checking app version: $e');
      print('[SPLASH] Continuing without version check...');
    }

    // ========================================
    // –î–ê–õ–¨–ù–ï–ô–®–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // ========================================
    _loadingText.value = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...';

    await _authRepository.init();

    await Future.delayed(const Duration(milliseconds: 500));

    await _checkAuthStatus();
  }

  Future<void> _checkAuthStatus() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –±–∏–æ–º–µ—Ç—Ä–∏—è
    final hasBiometricCredentials = _biometricService.savedCredentials != null &&
        _biometricService.isBiometricEnabled;

    // –ï—Å–ª–∏ –±–∏–æ–º–µ—Ç—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ - –í–°–ï–ì–î–ê –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
    if (hasBiometricCredentials) {
      _loadingText.value = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏–∏...';

      await Future.delayed(const Duration(milliseconds: 300));

      final success = await _tryBiometricLogin();

      if (success) {
        Get.offAllNamed(Routes.NAVBAR);
      } else {
        Get.offAllNamed(Routes.AUTH);
      }
      return;
    }

    // –ï—Å–ª–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞–ª–æ—á–∫—É "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
    final rememberMe = _storage.read('remember_me') ?? false;

    if (!rememberMe) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Ö–æ—Ç–µ–ª —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–µ—Å—Å–∏—é
      await _authRepository.logout();
      Get.offAllNamed(Routes.AUTH);
      return;
    }

    // –ï—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" —Å—Ç–æ–∏—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    if (_authRepository.isAuthenticated) {
      Get.offAllNamed(Routes.NAVBAR);
    } else {
      Get.offAllNamed(Routes.AUTH);
    }
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –±–∏–æ–º–µ—Ç—Ä–∏—é
  Future<bool> _tryBiometricLogin() async {
    try {
      final authenticated = await _biometricService.authenticateWithBiometrics();

      if (!authenticated) {
        return false;
      }

      final credentials = _biometricService.savedCredentials;
      final savedRegionCode = _storage.read('saved_region_code');

      if (credentials == null || savedRegionCode == null) {
        return false;
      }

      final username = credentials['username'] as String?;
      final password = credentials['password'] as String?;

      if (username == null || password == null) {
        return false;
      }

      final response = await _authRepository.login(
        username: username,
        password: password,
        regionCode: savedRegionCode,
      );

      if (response.status == 'SUCCESS') {
        return true;
      } else if (response.status == 'SYNCING') {
        return false;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  }
}